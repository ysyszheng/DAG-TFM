import sys
import random
import numpy as np
import torch
import os
from typing import List
import itertools
from copy import deepcopy
import threading

NO_VERBOSE = False

def print_thread_count():
    thread_count = threading.active_count()
    print(f"Current active thread count: {thread_count}")


def fix_seed(seed):
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.backends.cudnn.deterministic = True


def log(*args):
    if not NO_VERBOSE:
        COLOR_RED = "\033[91m"
        COLOR_RESET = "\033[0m"
        fn = sys._getframe().f_back.f_code.co_filename
        ln = sys._getframe().f_back.f_lineno
        highlight_msg = 'File \"%s\", line %d\n' % (fn, ln)

        colored_msg = COLOR_RED + highlight_msg + COLOR_RESET
        print(colored_msg, *args)


def normize(x, mean, std):
    return (x - mean) / std


def unormize(x, mean, std):
    return x * std + mean


def get_dist_from_margin(b, m, q, is_check=True):
    assert b >= 1 and m >= b and len(q) == m
    
    element_list = list(range(m))
    to_remove = []
    for i, q_element in enumerate(q):
        if q_element == 0:
            to_remove.append(i)
    for i in reversed(to_remove):
        q.pop(i)
        element_list.pop(i)

    event_set = list(itertools.combinations(element_list, b))

    if b == 1:
        p = q

    elif m == b:
        p = [1]
    
    elif b > 1 and (b + 1) <= m and m < 2 * b:
        b_prime = m - b
        q_tilde = [1 - q[i] for i in range(len(q))]
        event_set_tilde, p_tilde = get_dist_from_margin(b_prime, m, deepcopy(q_tilde))
        p = [0] * len(list(event_set))
        for i, combo in enumerate(event_set):
            for j, combo_tilde in enumerate(event_set_tilde):
                if set(combo).isdisjoint(set(combo_tilde)):
                    p[i] = p_tilde[j]

    elif b > 1 and m >= 2 * b:
        sorted_indices = sorted(range(len(q)), key=lambda i: q[i], reverse=True)
        sorted_q = [q[i] for i in sorted_indices]

        q_tilde = [0 for _ in range(m-1)]
        for i in range(b-1):
            q_tilde[i] = (sorted_q[i] - sorted_q[m-1]) / (1 - sorted_q[m-1])
        for i in range(b-1, m-1):
            q_tilde[i] = (sorted_q[i]) / (1 - sorted_q[m-1])
        event_set_tilde, p_tilde = get_dist_from_margin(b, m-1, deepcopy(q_tilde))
        
        p = [0] * len(list(event_set))
        for i, combo in enumerate(event_set):
            if set(combo) == set(list(range(b - 1)) + [m - 1]):
                p[i] = sorted_q[m-1]
            if (m-1) not in combo:
                for j, combo_tilde in enumerate(event_set_tilde):
                    if set(combo_tilde) == set(combo):
                        p[i] = (1 - sorted_q[m - 1]) * p_tilde[j]

        for i, combo in enumerate(event_set):
            event_set[i] = tuple([sorted_indices[j] for j in combo])
    else:
        raise ValueError

    to_remove = []
    for i, p_event in enumerate(p):
        if p_event == 0:
            to_remove.append(i)
    for i in reversed(to_remove):
        p.pop(i)
        event_set.pop(i)
    
    if is_check:
        assert abs(sum(p) - 1) < 1e-6
        for i in range(len(p)):
            assert p[i] >= 0
            assert p[i] <= 1
        q_calc = [0] * m
        for i, combo in enumerate(event_set):
            for j in combo:
                q_calc[j] += p[i]
        for i in range(m):
            assert abs(q_calc[i] - q[i]) < 1e-6

    return event_set, p

if __name__ == '__main__':
    b = 50
    m = 500
    q =[0.00000000e+00,0.00000000e+00,0.00000000e+00,2.62029120e-01,0.00000000e+00,3.00680893e-01,1.52377073e-02,7.85831884e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.58951455e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.91724551e-01,3.72891491e-01,4.38687391e-01,0.00000000e+00,2.94459393e-02,1.63544335e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.92748154e-02,1.07166830e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.79914236e-01,5.69689397e-03,2.06883360e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,9.97391491e-02,0.00000000e+00,1.32032942e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,8.58353778e-04,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.56528402e-01,0.00000000e+00,0.00000000e+00,1.26853701e-01,0.00000000e+00,4.02724418e-01,7.34620391e-01,0.00000000e+00,1.24062368e-01,1.62604510e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,9.99328468e-02,1.91594684e-01,0.00000000e+00,3.95696413e-01,0.00000000e+00,0.00000000e+00,1.28461113e-01,7.32089042e-02,0.00000000e+00,4.40083832e-01,0.00000000e+00,1.00000000e+00,0.00000000e+00,0.00000000e+00,4.91552802e-01,0.00000000e+00,2.79105006e-02,0.00000000e+00,6.77503920e-01,1.55991118e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.06383969e-01,3.14420745e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.12444852e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,7.64393691e-02,0.00000000e+00,0.00000000e+00,2.02991046e-01,0.00000000e+00,8.53653465e-02,1.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,3.86255805e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,3.39862717e-03,5.21096998e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,8.80818294e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,7.60365327e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,7.65218265e-01,0.00000000e+00,7.41076620e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.27697928e-01,0.00000000e+00,1.03601694e-01,1.02445441e-01,0.00000000e+00,0.00000000e+00,2.94459393e-02,4.73217514e-01,0.00000000e+00,3.58676319e-01,0.00000000e+00,1.00900430e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.02376505e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,3.72014582e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,9.99973993e-02,8.17910808e-01,0.00000000e+00,5.60242234e-01,1.83179904e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.34668772e-01,0.00000000e+00,0.00000000e+00,6.56921940e-01,0.00000000e+00,2.24010937e-01,6.27322381e-01,4.17411363e-01,3.46046335e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.74138520e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,3.19701323e-01,1.24435230e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.49565834e-04,0.00000000e+00,0.00000000e+00,2.88586660e-01,0.00000000e+00,0.00000000e+00,1.24435230e-01,0.00000000e+00,0.00000000e+00,2.36097199e-01,0.00000000e+00,3.40258540e-02,5.48629856e-01,0.00000000e+00,1.40637884e-01,0.00000000e+00,0.00000000e+00,1.00000000e+00,1.00000000e+00,0.00000000e+00,0.00000000e+00,1.25924569e-01,0.00000000e+00,1.00000000e+00,0.00000000e+00,5.39952985e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.62237412e-01,2.86455503e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,3.45744801e-01,2.69085590e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,6.93502432e-01,0.00000000e+00,2.57092586e-02,2.19379564e-01,8.97298137e-03,1.33382797e-01,0.00000000e+00,6.17585236e-02,1.14229262e-01,0.00000000e+00,9.92106922e-01,0.00000000e+00,0.00000000e+00,9.83815672e-02,4.44212194e-02,5.89981751e-02,7.65218265e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.13066170e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.80288669e-02,2.22379232e-01,0.00000000e+00,3.41500425e-01,4.48527609e-01,1.74613317e-01,1.45110868e-01,1.39788353e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,7.75122532e-02,0.00000000e+00,0.00000000e+00,2.18559611e-01,3.01755424e-02,2.35726151e-02,0.00000000e+00,1.34668772e-01,5.06350576e-02,0.00000000e+00,1.00000000e+00,0.00000000e+00,3.86815648e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.85829608e-02,0.00000000e+00,2.19106335e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.07440549e-01,1.32830912e-01,0.00000000e+00,9.16138334e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.61371634e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.31571336e-02,0.00000000e+00,1.00000000e+00,0.00000000e+00,1.72064735e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,3.62292350e-01,1.19070477e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.47525264e-02,0.00000000e+00,2.06328462e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.10431429e-01,0.00000000e+00,2.44577969e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.59364487e-01,1.71890649e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.04114899e-01,4.47676169e-01,0.00000000e+00,4.34261521e-02,4.11049425e-01,2.37940505e-02,1.05652931e-02,0.00000000e+00,4.71130577e-02,5.17573902e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,8.05236003e-01,0.00000000e+00,9.95928418e-03,1.96386582e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,2.52818131e-01,0.00000000e+00,2.40906529e-01,0.00000000e+00,0.00000000e+00,1.00000000e+00,1.00000000e+00,2.78244086e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,9.77988333e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,3.30114837e-02,0.00000000e+00,1.00000000e+00,8.88561257e-01,4.38507119e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.00000000e+00,0.00000000e+00,0.00000000e+00,2.04216370e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,5.37160497e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,4.25717944e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,3.07273943e-01,1.86026319e-02,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,1.46795817e-01,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,7.28802764e-01,4.11874784e-01,0.00000000e+00,0.00000000e+00,1.00000000e+00,0.00000000e+00,0.00000000e+00] 
    event_set, p = get_dist_from_margin(b, m, q, True)

    for e, prob in zip(event_set, p):
        print(e, prob)
